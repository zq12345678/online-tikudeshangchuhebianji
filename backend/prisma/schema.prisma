// backend/prisma/schema.prisma (最终完整版)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADMIN
}

model User {
  id           String           @id @default(cuid())
  email        String           @unique
  passwordHash String
  name         String?
  role         Role             @default(STUDENT)
  createdAt    DateTime         @default(now())
  submissions  ExamSubmission[]
}

model ExamBoard {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  subjects Subject[]
}

model Subject {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  examBoard       ExamBoard        @relation(fields: [examBoardId], references: [id])
  examBoardId     Int
  exams           Exam[]
  knowledgePoints KnowledgePoint[]
  questions       Question[]
}

enum ExamType {
  PRACTICE
  MOCK_EXAM
}

model Exam {
  id              String           @id @default(cuid())
  title           String
  durationMinutes Int
  subject         Subject          @relation(fields: [subjectId], references: [id])
  subjectId       Int
  examType        ExamType         @default(PRACTICE)
  createdAt       DateTime         @default(now()) // 用于排序的创建时间字段
  questions       Question[]       @relation("ExamToQuestion")
  submissions     ExamSubmission[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  FREE_RESPONSE
  PROGRAMMING
  MATCHING
  DIAGRAM
}

model Question {
  id                      String                 @id @default(cuid())
  subject                 Subject                @relation(fields: [subjectId], references: [id])
  subjectId               Int
  questionText            String
  stimulusText            String?
  questionType            QuestionType
  layoutType              String                 @default("STACKED")
  explanation             String?
  isRealExam              Boolean                @default(false)
  realExamYear            Int?
  realExamMonth           Int?
  multipleChoiceOptions   MultipleChoiceOption[]
  userAnswers             UserAnswer[]
  knowledgePoints         KnowledgePoint[]
  exams                   Exam[]                 @relation("ExamToQuestion")
}

model KnowledgePoint {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  subject   Subject    @relation(fields: [subjectId], references: [id])
  subjectId Int
  questions Question[]
}

model MultipleChoiceOption {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  text       String
  isCorrect  Boolean
}

model ExamSubmission {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  exam        Exam         @relation(fields: [examId], references: [id])
  examId      String
  score       Float?
  submittedAt DateTime     @default(now())
  userAnswers UserAnswer[]
}

model UserAnswer {
  id            String         @id @default(cuid())
  submission    ExamSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId  String
  question      Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    String
  answerContent String
}