generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. 用户模型
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  name          String?
  createdAt     DateTime  @default(now())
  submissions   ExamSubmission[]
}

// 2. 考试局模型
model ExamBoard {
  id      Int       @id @default(autoincrement())
  name    String    @unique // e.g., "AP", "A-Level", "IB"
  subjects Subject[]
}

// 3. 学科模型
model Subject {
  id              Int       @id @default(autoincrement())
  name            String    @unique // e.g., "AP Computer Science A"
  examBoard       ExamBoard @relation(fields: [examBoardId], references: [id])
  examBoardId     Int
  exams           Exam[]
  knowledgePoints KnowledgePoint[]
}

// 4. 试卷模型
model Exam {
  id              String    @id @default(cuid())
  title           String
  durationMinutes Int
  subject         Subject   @relation(fields: [subjectId], references: [id])
  subjectId       Int
  questions       Question[]
  submissions     ExamSubmission[]
}

// 题目类型的枚举
enum QuestionType {
  MULTIPLE_CHOICE
  FREE_RESPONSE
  PROGRAMMING
  MATCHING
  DIAGRAM
}

// 5. 题目模型
model Question {
  id                    String    @id @default(cuid())
  exam                  Exam      @relation(fields: [examId], references: [id])
  examId                String
  questionText          String
  stimulusText          String?
  questionType          QuestionType
  layoutType            String    @default("STACKED") // "STACKED" or "SPLIT"
  order                 Int
  multipleChoiceOptions MultipleChoiceOption[]
  userAnswers           UserAnswer[]
  knowledgePoints       KnowledgePoint[]
}

// 6. 知识点模型
model KnowledgePoint {
  id        Int      @id @default(autoincrement())
  name      String   @unique // e.g., "Java Loops", "Recursion"
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  questions Question[]
}

// 7. 选择题选项模型
model MultipleChoiceOption {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  text       String
  isCorrect  Boolean
}

// 8. 用户提交答卷模型
model ExamSubmission {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  exam        Exam     @relation(fields: [examId], references: [id])
  examId      String
  score       Float?
  submittedAt DateTime @default(now())
  userAnswers UserAnswer[]
}

// 9. 用户单个答案模型
model UserAnswer {
  id              String   @id @default(cuid())
  submission      ExamSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId    String
  question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String
  answerContent   String
}